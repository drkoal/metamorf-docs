{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Metamorf","text":"<p>Metamorf is a Metadata Suite that generates SQL code within a framework based on select statements. Those queries are generated based on metadata that the user has entered on the framework. All this metadata is processed to maximize its potential, giving the user some features and facilities.</p> <p>It can execute and materialize these datasets, control the lineage end to end, even deploy an api sharing all the metadata, all in one. Thanks to its development, it is easy to deploy and use for anyone.</p> <p>It offers accelerators that allow you to develop data models in a faster and more controlled way, for example Datavault modelling. It offers, based on templates, the creation of entities in a standarized and scalable way, avoiding the possibility of human error.</p> <p>This entire frameworks was created and is maintained by Guillermo Aumatell Salom (guillermoaumatell@gmail.com). It is currently in beta phase constantly growing.</p> <pre><code>Current Version: 0.4.4.2\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>Metamorf is a Python Software that orchestrates, controls and transforms data. From a metadata entry, Metamorf process the metadata to full its system and in exchange grants a series of functionalities that allows to control all your datawarehouse.</p> <p>Metamorf works with the concept of owner: it can be a user or a use case. Some actions of metamorf can be done selecting an owner, indicated on the configuration file. It can be useful for teamwork using the same Metadata Database and isolating each user or use case under development. Is up to you.</p> <p>Metamorf stores all the metadata historically, it means that the users can see the status of their datawarehouse in the past at any time and know how the data was processed.</p> <p>Can fit with other technologies as dbt, giving the code ready to execute. </p> <p>An advantage it has, the metadata and data can be on the same database or in separate ones. Thus allowing it to be adaptaded to a greateer number of different architectures and needs.</p>"},{"location":"architecture/#databases","title":"Databases","text":"<p>Actually Metamorf supports the following databases:</p> <ul> <li>Snowflake</li> <li>SQLite</li> <li>PostgreSQL</li> <li>MySQL</li> </ul>"},{"location":"contact/","title":"Contact","text":"<p>Author: </p> <pre><code>Guillermo Aumatell Salom\n</code></pre> <p>Email: </p> <pre><code>guillermoaumatell@gmail.com\n</code></pre>"},{"location":"database/","title":"Database","text":"<p>Under development</p>"},{"location":"version_features/","title":"Version Features","text":""},{"location":"version_features/#0442","title":"0.4.4.2","text":"<ul> <li>(Bugfix) Execute any commands without any config file.</li> <li>(Bugfix) Errors on NULL or None values on metadata entry.</li> <li>(Bugfix) Errors on column detection on complex mappings.</li> <li>(Bugfix) 'Files' command not using the correct target path connection.</li> <li>(Bugfix) Error on historical metadata when delete some entities in special casuistics.</li> <li>(Feature) Added 'if is null' logic on all hashes.</li> <li>(Feature) The user can change column names on Datavault Engine - Mappings.</li> <li>(Feature) Added duplicate control on Datavault Engine - Satellites.</li> </ul>"},{"location":"version_features/#0441","title":"0.4.4.1","text":"<ul> <li>(Feature) Datavault module to speed up the creation of a Datavault Model. New metadata entry was added.</li> <li>(Feature) File loader to upload csv files to the data database.</li> <li>(Feature) Added compatibility to PostgreSQL and MySQL for metadata and data databases.</li> <li>(Feature) Added compatibility to Linux OS.</li> </ul>"},{"location":"version_features/#0431","title":"0.4.3.1","text":"<ul> <li>(Bugfix) on installation with some packages.</li> </ul>"}]}